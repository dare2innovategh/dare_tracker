import { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { 
  Loader2, 
  Save, 
  Check as ClipboardCheck,
  BarChart2,
  DollarSign,
  Settings,
  Users,
  Shield,
  FileText,
  Briefcase,
  Target,
  LineChart,
  Factory,
  FileCheck,
  Eye
} from "lucide-react";
import { FeasibilityAssessment, insertFeasibilityAssessmentSchema } from "@shared/schema";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { formatDate } from "@/lib/utils";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

// Mastercard color theme
const THEME = {
  primary: "#FF5F00", // Mastercard Orange
  secondary: "#EB001B", // Mastercard Red
  accent: "#F79E1B", // Mastercard Yellow
  dark: "#1A1F71", // Mastercard Dark Blue
};

type ScoreSelectProps = {
  value: string | undefined;
  onChange: (value: string) => void;
  disabled?: boolean;
};

// Component for score selection (1-5) with Mastercard theme
const ScoreSelect = ({ value, onChange, disabled }: ScoreSelectProps) => {
  return (
    <Select value={value || ""} onValueChange={onChange} disabled={disabled}>
      <SelectTrigger className="w-full border-gray-200 focus:border-gray-300">
        <SelectValue placeholder="Select score (1-5)" />
      </SelectTrigger>
      <SelectContent>
        <SelectItem key="score-1" value="1" className="flex items-center py-2">
          <span className="h-4 w-4 rounded-full mr-2" style={{ backgroundColor: THEME.secondary }}></span>
          1 - Very Poor
        </SelectItem>
        <SelectItem key="score-2" value="2" className="flex items-center py-2">
          <span className="h-4 w-4 rounded-full mr-2" style={{ backgroundColor: "#FF8080" }}></span>
          2 - Poor
        </SelectItem>
        <SelectItem key="score-3" value="3" className="flex items-center py-2">
          <span className="h-4 w-4 rounded-full mr-2" style={{ backgroundColor: "#FFD580" }}></span>
          3 - Average
        </SelectItem>
        <SelectItem key="score-4" value="4" className="flex items-center py-2">
          <span className="h-4 w-4 rounded-full mr-2" style={{ backgroundColor: "#A0D995" }}></span>
          4 - Good
        </SelectItem>
        <SelectItem key="score-5" value="5" className="flex items-center py-2">
          <span className="h-4 w-4 rounded-full mr-2" style={{ backgroundColor: "#4CAF50" }}></span>
          5 - Excellent
        </SelectItem>
      </SelectContent>
    </Select>
  );
};

interface FeasibilityAssessmentDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  businessId: number;
  businessName?: string;
  district?: string;
  existingAssessment?: any; // Pass the existing assessment from parent
  onSave?: () => void; // Callback to notify parent after save
}

export default function FeasibilityAssessmentDialog({
  open,
  onOpenChange,
  businessId,
  businessName = "",
  district = "",
  existingAssessment,
  onSave
}: FeasibilityAssessmentDialogProps) {
  const { toast } = useToast();
  const [isReviewing, setIsReviewing] = useState(false);
  const [reviewComments, setReviewComments] = useState("");
  const [hasFeasibilityAssessment, setHasFeasibilityAssessment] = useState(false);
  
  // Extended schema with validation
  const formSchema = z.object({
    businessName: z.string().min(2, "Business name is required"),
    district: z.string().min(1, "District is required"),
    businessId: z.number().optional(),
    youthId: z.number().optional(),
    businessDescription: z.string().optional(),
    
    // Market Assessment
    marketDemand: z.string().optional(),
    competitionLevel: z.string().optional(),
    customerAccessibility: z.string().optional(),
    pricingPower: z.string().optional(),
    marketingEffectiveness: z.string().optional(),
    
    // Operations Assessment
    locationAdvantage: z.string().optional(),
    resourceAvailability: z.string().optional(),
    productionEfficiency: z.string().optional(), 
    supplyChain: z.string().optional(),
    
    // Financial Assessment
    profitMargins: z.string().optional(),
    cashFlow: z.string().optional(),
    accessToCapital: z.string().optional(),
    financialRecords: z.string().optional(),
    
    // Management Assessment
    leadershipCapability: z.string().optional(),
    teamCompetence: z.string().optional(),
    processDocumentation: z.string().optional(),
    innovationCapacity: z.string().optional(),
    
    // Overall Assessment
    overallViability: z.string().optional(),
    growthPotential: z.string().optional(),
    reviewComments: z.string().optional(),
    recommendations: z.string().optional(),
    
    // Other fields from original schema
    startupCosts: z.string().optional(),
    operatingCosts: z.string().optional(),
    profitMargin: z.string().optional(),
    fundingAccessibility: z.string().optional(),
    
    locationSuitability: z.string().optional(),
    supplyChainReliability: z.string().optional(),
    operationalEfficiency: z.string().optional(),
    scalabilityPotential: z.string().optional(),
    
    skillsetRelevance: z.string().optional(),
    experienceLevel: z.string().optional(),
    teamCommitment: z.string().optional(),
    teamCohesion: z.string().optional(),
    
    digitalSkillLevel: z.string().optional(),
    techInfrastructure: z.string().optional(),
    digitalMarketingCapacity: z.string().optional(),
    dataManagement: z.string().optional(),
    techAdaptability: z.string().optional(),
    
    status: z.string().optional(),
    assessmentDate: z.string().optional(),
    riskFactors: z.string().optional(),
    growthOpportunities: z.string().optional(),
    recommendedActions: z.string().optional(),
  });

  type FormValues = z.infer<typeof formSchema>;

  // Setup form
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      businessName: businessName || "",
      district: district || "",
      businessId: businessId,
      businessDescription: "",
      status: "Draft",
      riskFactors: "",
      growthOpportunities: "",
      recommendedActions: "",
    },
  });
  
  // Initialize form with existing assessment if provided
  useEffect(() => {
    if (existingAssessment) {
      setHasFeasibilityAssessment(true);
      
      // Populate form with existing assessment data
      form.reset({
        businessName: existingAssessment.businessName || businessName || "",
        district: existingAssessment.district || district || "",
        businessId: existingAssessment.businessId || businessId,
        youthId: existingAssessment.youthId || undefined,
        businessDescription: existingAssessment.businessDescription || "",
        
        // Market Assessment
        marketDemand: existingAssessment.marketDemand || undefined,
        competitionLevel: existingAssessment.competitionLevel || undefined,
        customerAccessibility: existingAssessment.customerAccessibility || undefined,
        pricingPower: existingAssessment.pricingPower || undefined,
        marketingEffectiveness: existingAssessment.marketingEffectiveness || undefined,
        
        // Operations Assessment
        locationAdvantage: existingAssessment.locationAdvantage || undefined,
        resourceAvailability: existingAssessment.resourceAvailability || undefined,
        productionEfficiency: existingAssessment.productionEfficiency || undefined,
        supplyChain: existingAssessment.supplyChain || undefined,
        
        // Financial Assessment 
        profitMargins: existingAssessment.profitMargins || undefined,
        cashFlow: existingAssessment.cashFlow || undefined,
        accessToCapital: existingAssessment.accessToCapital || undefined,
        financialRecords: existingAssessment.financialRecords || undefined,
        
        // Management Assessment
        leadershipCapability: existingAssessment.leadershipCapability || undefined,
        teamCompetence: existingAssessment.teamCompetence || undefined,
        processDocumentation: existingAssessment.processDocumentation || undefined,
        innovationCapacity: existingAssessment.innovationCapacity || undefined,
        
        // Overall Assessment
        overallViability: existingAssessment.overallViability || undefined,
        growthPotential: existingAssessment.growthPotential || undefined,
        reviewComments: existingAssessment.reviewComments || "",
        recommendations: existingAssessment.recommendations || "",
        
        // Legacy/original fields
        startupCosts: existingAssessment.startupCosts || undefined,
        operatingCosts: existingAssessment.operatingCosts || undefined,
        profitMargin: existingAssessment.profitMargin || undefined,
        fundingAccessibility: existingAssessment.fundingAccessibility || undefined,
        
        locationSuitability: existingAssessment.locationSuitability || undefined,
        supplyChainReliability: existingAssessment.supplyChainReliability || undefined,
        operationalEfficiency: existingAssessment.operationalEfficiency || undefined,
        scalabilityPotential: existingAssessment.scalabilityPotential || undefined,
        
        skillsetRelevance: existingAssessment.skillsetRelevance || undefined,
        experienceLevel: existingAssessment.experienceLevel || undefined,
        teamCommitment: existingAssessment.teamCommitment || undefined,
        teamCohesion: existingAssessment.teamCohesion || undefined,
        leadershipCapacity: existingAssessment.leadershipCapacity || undefined,
        
        digitalSkillLevel: existingAssessment.digitalSkillLevel || undefined,
        techInfrastructure: existingAssessment.techInfrastructure || undefined,
        digitalMarketingCapacity: existingAssessment.digitalMarketingCapacity || undefined,
        dataManagement: existingAssessment.dataManagement || undefined,
        techAdaptability: existingAssessment.techAdaptability || undefined,
        
        status: existingAssessment.status || "Draft",
        assessmentDate: existingAssessment.assessmentDate ? new Date(existingAssessment.assessmentDate).toISOString().split('T')[0] : undefined,
        riskFactors: existingAssessment.riskFactors || "",
        growthOpportunities: existingAssessment.growthOpportunities || "",
        recommendedActions: existingAssessment.recommendedActions || "",
      });
    }
  }, [existingAssessment, businessId, businessName, district, form]);
  
  // Check if business already has a feasibility assessment - only if no existingAssessment provided
  const { data: existingAssessments, isLoading: isLoadingExistingAssessments } = useQuery({
    queryKey: [`/api/feasibility/assessments/business/${businessId}`],
    queryFn: async () => {
      if (!businessId) return [];
      try {
        const response = await fetch(`/api/feasibility/assessments/business/${businessId}`);
        if (!response.ok) {
          console.error("Failed to fetch existing assessments");
          return [];
        }
        return response.json();
      } catch (error) {
        console.error("Error fetching existing assessments:", error);
        return [];
      }
    },
    enabled: !!businessId && open && !existingAssessment,
    onSuccess: (data) => {
      if (data && data.length > 0) {
        setHasFeasibilityAssessment(true);
        const assessment = data[0];
        
        // Populate form with existing assessment data
        form.reset({
          businessName: assessment.businessName || businessName || "",
          district: assessment.district || district || "",
          businessId: assessment.businessId || businessId,
          youthId: assessment.youthId || undefined,
          businessDescription: assessment.businessDescription || "",
          
          // Market Assessment
          marketDemand: assessment.marketDemand || undefined,
          competitionLevel: assessment.competitionLevel || undefined,
          customerAccessibility: assessment.customerAccessibility || undefined,
          pricingPower: assessment.pricingPower || undefined,
          marketingEffectiveness: assessment.marketingEffectiveness || undefined,
          
          // Operations Assessment
          locationAdvantage: assessment.locationAdvantage || undefined,
          resourceAvailability: assessment.resourceAvailability || undefined,
          productionEfficiency: assessment.productionEfficiency || undefined,
          supplyChain: assessment.supplyChain || undefined,
          
          // Financial Assessment 
          profitMargins: assessment.profitMargins || undefined,
          accessToCapital: assessment.accessToCapital || undefined,
          financialRecords: assessment.financialRecords || undefined,
          
          // Management Assessment
          leadershipCapability: assessment.leadershipCapability || undefined,
          teamCompetence: assessment.teamCompetence || undefined,
          processDocumentation: assessment.processDocumentation || undefined,
          innovationCapacity: assessment.innovationCapacity || undefined,
          
          // Overall Assessment
          overallViability: assessment.overallViability || undefined,
          growthPotential: assessment.growthPotential || undefined,
          reviewComments: assessment.reviewComments || "",
          recommendations: assessment.recommendations || "",
          
          // Legacy fields
          startupCosts: assessment.startupCosts || undefined,
          operatingCosts: assessment.operatingCosts || undefined,
          profitMargin: assessment.profitMargin || undefined,
          fundingAccessibility: assessment.fundingAccessibility || undefined,
          
          locationSuitability: assessment.locationSuitability || undefined,
          supplyChainReliability: assessment.supplyChainReliability || undefined,
          operationalEfficiency: assessment.operationalEfficiency || undefined,
          scalabilityPotential: assessment.scalabilityPotential || undefined,
          
          skillsetRelevance: assessment.skillsetRelevance || undefined,
          experienceLevel: assessment.experienceLevel || undefined,
          teamCommitment: assessment.teamCommitment || undefined,
          teamCohesion: assessment.teamCohesion || undefined,
          leadershipCapacity: assessment.leadershipCapacity || undefined,
          
          digitalSkillLevel: assessment.digitalSkillLevel || undefined,
          techInfrastructure: assessment.techInfrastructure || undefined,
          digitalMarketingCapacity: assessment.digitalMarketingCapacity || undefined,
          dataManagement: assessment.dataManagement || undefined,
          techAdaptability: assessment.techAdaptability || undefined,
          
          status: assessment.status || "Draft",
          assessmentDate: assessment.assessmentDate ? new Date(assessment.assessmentDate).toISOString().split('T')[0] : undefined,
          riskFactors: assessment.riskFactors || "",
          growthOpportunities: assessment.growthOpportunities || "",
          recommendedActions: assessment.recommendedActions || "",
        });
      } else {
        // Reset form with business details for new assessment
        form.reset({
          businessName: businessName || "",
          district: district || "",
          businessId: businessId,
          businessDescription: "",
          status: "Draft",
          riskFactors: "",
          growthOpportunities: "",
          recommendedActions: "",
        });
      }
    }
  });

  // Fetch business data if needed
  const { data: business, isLoading: isLoadingBusiness } = useQuery({
    queryKey: [`/api/business-profiles/${businessId}`],
    queryFn: async () => {
      if (!businessId) return null;
      console.log("Fetching business data for ID:", businessId);
      const response = await fetch(`/api/business-profiles/${businessId}`);
      if (!response.ok) {
        throw new Error("Failed to fetch business details");
      }
      const data = await response.json();
      console.log("Business data fetched:", data);
      return data;
    },
    enabled: !!businessId && open && (!businessName || !district) && !existingAssessment,
    onSuccess: (data) => {
      if (data && !hasFeasibilityAssessment) {
        // Only update if we don't have an existing assessment
        form.setValue("businessName", data.businessName || "");
        form.setValue("district", data.district || "");
        
        // Include other business details if available
        if (data.businessDescription) {
          form.setValue("businessDescription", data.businessDescription);
        }
      }
    }
  });
  
  // Determine if form is editable
  const isFormEditable = true;
  
  // Mutation to save assessment
  const saveMutation = useMutation({
    mutationFn: async (data: FormValues) => {
      // Add businessId from props if not in form data
      const payload = {
        ...data,
        businessId: data.businessId || businessId,
        status: "Draft" // Always save as draft from dialog
      };
      
      const response = await apiRequest(
        "POST", 
        "/api/feasibility/assessments",
        payload
      );
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to save assessment");
      }
      
      return await response.json();
    },
    onSuccess: () => {
      toast({
        title: "Assessment Saved",
        description: "The feasibility assessment has been saved successfully.",
      });
      queryClient.invalidateQueries({ queryKey: [`/api/feasibility/assessments/business/${businessId}`] });
      
      // Call the onSave callback if provided
      if (onSave) {
        onSave();
      }
      
      onOpenChange(false); // Close the dialog on success
    },
    onError: (error: Error) => {
      toast({
        title: "Save Error",
        description: error.message,
        variant: "destructive",
      });
    }
  });
  
  // Submit handler
  const onSubmit = (data: FormValues) => {
    console.log("Submitting form data:", data);
    saveMutation.mutate(data);
  };
  
  // Combine loading states
  const isLoading = isLoadingExistingAssessments || isLoadingBusiness || saveMutation.isPending;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl flex items-center" style={{ color: THEME.dark }}>
            <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
              background: `linear-gradient(135deg, ${THEME.secondary}20 0%, ${THEME.primary}10 100%)` 
            }}>
              <ClipboardCheck className="h-5 w-5" style={{ color: THEME.primary }} />
            </div>
            Feasibility Assessment Matrix
          </DialogTitle>
          <DialogDescription>
            Evaluate the viability of this business across key feasibility dimensions
          </DialogDescription>
        </DialogHeader>

        {isLoading ? (
          <div className="flex flex-col items-center justify-center py-12">
            <Loader2 className="h-12 w-12 animate-spin mb-4" style={{ color: THEME.primary }} />
            <p className="text-lg" style={{ color: THEME.dark }}>
              Loading assessment...
            </p>
          </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-6">
                <Card className="border border-gray-100 shadow-sm overflow-hidden">
                  <div className="h-1 w-full" style={{ 
                    background: `linear-gradient(to right, ${THEME.primary}, ${THEME.secondary})` 
                  }}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center" style={{ color: THEME.dark }}>
                      <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
                        background: `linear-gradient(135deg, ${THEME.primary}20 0%, ${THEME.secondary}10 100%)` 
                      }}>
                        <Briefcase className="h-4 w-4" style={{ color: THEME.primary }} />
                      </div>
                      Business Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="businessName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel style={{ color: THEME.dark }}>Business Name</FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="Enter business name" 
                                {...field} 
                                disabled={!isFormEditable || isLoading}
                                className="border-gray-200 focus:border-gray-300 focus:ring-2 focus:ring-offset-1"
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="district"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel style={{ color: THEME.dark }}>District</FormLabel>
                            <Select
                              value={field.value}
                              onValueChange={field.onChange}
                              disabled={!isFormEditable || isLoading}
                            >
                              <FormControl>
                                <SelectTrigger className="border-gray-200 focus:border-gray-300">
                                  <SelectValue placeholder="Select district" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {/* Using proper value prop that isn't an empty string */}
                                <SelectItem key="bekwai" value="Bekwai">Bekwai</SelectItem>
                                <SelectItem key="gushegu" value="Gushegu">Gushegu</SelectItem>
                                <SelectItem key="lmk" value="Lower Manya Krobo">Lower Manya Krobo</SelectItem>
                                <SelectItem key="yk" value="Yilo Krobo">Yilo Krobo</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={form.control}
                      name="businessDescription"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel style={{ color: THEME.dark }}>Business Description</FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Describe the business..." 
                              className="h-24 border-gray-200 focus:border-gray-300 focus:ring-2 focus:ring-offset-1" 
                              {...field} 
                              disabled={!isFormEditable || isLoading}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>

                <Card className="border border-gray-100 shadow-sm overflow-hidden">
                  <div className="h-1 w-full" style={{ 
                    background: `linear-gradient(to right, ${THEME.primary}, ${THEME.accent})` 
                  }}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center" style={{ color: THEME.dark }}>
                      <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
                        background: `linear-gradient(135deg, ${THEME.primary}20 0%, ${THEME.accent}10 100%)` 
                      }}>
                        <BarChart2 className="h-4 w-4" style={{ color: THEME.primary }} />
                      </div>
                      Market Assessment
                    </CardTitle>
                    <FormDescription>
                      Rate these key factors on a scale of 1 (very poor) to 5 (excellent)
                    </FormDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="marketDemand"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Market Demand</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange} 
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Level of demand for the business's products/services
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="competitionLevel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Competition Level</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Position relative to competitors (5=very advantageous)
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="customerAccessibility"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Customer Accessibility</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ease of reaching target customers
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="pricingPower"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Pricing Power</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ability to set favorable prices
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="marketingEffectiveness"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Marketing Effectiveness</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Effectiveness of current marketing strategies
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>

                {/* Operations Assessment Card */}
                <Card className="border border-gray-100 shadow-sm overflow-hidden">
                  <div className="h-1 w-full" style={{ 
                    background: `linear-gradient(to right, ${THEME.accent}, ${THEME.primary})` 
                  }}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center" style={{ color: THEME.dark }}>
                      <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
                        background: `linear-gradient(135deg, ${THEME.accent}20 0%, ${THEME.primary}10 100%)` 
                      }}>
                        <Factory className="h-4 w-4" style={{ color: THEME.accent }} />
                      </div>
                      Operations Assessment
                    </CardTitle>
                    <FormDescription>
                      Evaluate the operational capacity and efficiency
                    </FormDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="locationAdvantage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Location Advantage</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Strategic advantages of business location
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="resourceAvailability"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Resource Availability</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Access to required resources
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="productionEfficiency"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Production Efficiency</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Efficiency of production processes
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="supplyChain"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Supply Chain</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Reliability and efficiency of the supply chain
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* Financial Assessment Card */}
                <Card className="border border-gray-100 shadow-sm overflow-hidden">
                  <div className="h-1 w-full" style={{ 
                    background: `linear-gradient(to right, ${THEME.secondary}, ${THEME.accent})` 
                  }}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center" style={{ color: THEME.dark }}>
                      <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
                        background: `linear-gradient(135deg, ${THEME.secondary}20 0%, ${THEME.accent}10 100%)` 
                      }}>
                        <DollarSign className="h-4 w-4" style={{ color: THEME.secondary }} />
                      </div>
                      Financial Assessment
                    </CardTitle>
                    <FormDescription>
                      Evaluate financial health and sustainability
                    </FormDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="profitMargins"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Profit Margins</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Profitability level compared to industry
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="cashFlow"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Cash Flow Management</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ability to maintain healthy cash flow
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="accessToCapital"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Access to Capital</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ability to secure funding when needed
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="financialRecords"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Financial Records</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Quality of financial documentation
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* Management Assessment Card */}
                <Card className="border border-gray-100 shadow-sm overflow-hidden">
                  <div className="h-1 w-full" style={{ 
                    background: `linear-gradient(to right, ${THEME.dark}, ${THEME.primary})` 
                  }}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center" style={{ color: THEME.dark }}>
                      <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
                        background: `linear-gradient(135deg, ${THEME.dark}20 0%, ${THEME.primary}10 100%)` 
                      }}>
                        <Users className="h-4 w-4" style={{ color: THEME.dark }} />
                      </div>
                      Management Assessment
                    </CardTitle>
                    <FormDescription>
                      Evaluate the management capability and team strength
                    </FormDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="leadershipCapability"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Leadership Capability</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Strength of business leadership
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="teamCompetence"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Team Competence</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Skills and experience of the team
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="processDocumentation"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Process Documentation</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Quality of process documentation
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="innovationCapacity"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Innovation Capacity</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ability to innovate and adapt
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* Overall Assessment Summary */}
                <Card className="border border-gray-100 shadow-sm overflow-hidden">
                  <div className="h-1 w-full" style={{ 
                    background: `linear-gradient(to right, ${THEME.primary}, ${THEME.dark})` 
                  }}></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center" style={{ color: THEME.dark }}>
                      <div className="h-8 w-8 rounded-full flex items-center justify-center mr-3" style={{ 
                        background: `linear-gradient(135deg, ${THEME.primary}20 0%, ${THEME.dark}10 100%)` 
                      }}>
                        <Target className="h-4 w-4" style={{ color: THEME.primary }} />
                      </div>
                      Overall Assessment
                    </CardTitle>
                    <FormDescription>
                      Overall business viability and potential
                    </FormDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="overallViability"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Overall Viability</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Overall business feasibility assessment
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="growthPotential"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Growth Potential</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Potential for future growth and scaling
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <div className="col-span-1 md:col-span-2">
                        <FormField
                          control={form.control}
                          name="reviewComments"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Assessment Comments</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="Enter detailed assessment comments..." 
                                  className="min-h-[100px] border-gray-200 focus:border-gray-300 focus:ring-2 focus:ring-offset-1" 
                                  {...field} 
                                  disabled={!isFormEditable || isLoading}
                                />
                              </FormControl>
                              <FormDescription>
                                Provide any additional comments on business feasibility
                              </FormDescription>
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <div className="col-span-1 md:col-span-2">
                        <FormField
                          control={form.control}
                          name="recommendations"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Recommendations</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="Enter recommendations for improvement..." 
                                  className="min-h-[100px] border-gray-200 focus:border-gray-300 focus:ring-2 focus:ring-offset-1" 
                                  {...field} 
                                  disabled={!isFormEditable || isLoading}
                                />
                              </FormControl>
                              <FormDescription>
                                Provide actionable recommendations for business improvement
                              </FormDescription>
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="locationAdvantage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Location Advantage</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Strategic advantages of business location
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="supplyChain"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Supply Chain</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Reliability of supply chain networks
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* Financial Assessment Card */}
                <Card className="border border-gray-200 shadow-sm overflow-hidden">
                  <div className="h-1 w-full bg-gradient-to-r from-[#FF5F00] via-[#EB001B] to-[#F79E1B]"></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg flex items-center">
                      <DollarSign className="h-5 w-5 mr-2 text-[#EB001B]" />
                      Financial Assessment
                    </CardTitle>
                    <CardDescription>
                      Evaluate financial strength and sustainability
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="profitMargins"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Profit Margins</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Current and projected profit margins
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="cashFlow"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Cash Flow</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Consistency and health of cash flow
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="accessToCapital"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Access to Capital</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ability to access additional funding
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="financialRecords"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Financial Records</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Quality and completeness of financial records
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* Management Assessment Card */}
                <Card className="border border-gray-200 shadow-sm overflow-hidden">
                  <div className="h-1 w-full bg-gradient-to-r from-[#333333] to-[#777777]"></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg flex items-center">
                      <Users className="h-5 w-5 mr-2 text-[#555555]" />
                      Management Assessment
                    </CardTitle>
                    <CardDescription>
                      Evaluate leadership and management capacity
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="leadershipCapability"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Leadership Capability</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Quality and experience of leadership
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="teamCompetence"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Team Competence</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Skill level and adaptability of team
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="processDocumentation"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Process Documentation</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Quality of business process documentation
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="innovationCapacity"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Innovation Capacity</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Ability to innovate and adapt to changes
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
                
                {/* Review and Recommendations Card */}
                <Card className="border border-gray-200 shadow-sm overflow-hidden col-span-1 md:col-span-2">
                  <div className="h-1 w-full bg-gradient-to-r from-[#66BB6A] to-[#43A047]"></div>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg flex items-center">
                      <FileCheck className="h-5 w-5 mr-2 text-[#43A047]" />
                      Review Summary & Recommendations
                    </CardTitle>
                    <CardDescription>
                      Overall assessment and suggested next steps
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 gap-4">
                      <FormField
                        control={form.control}
                        name="overallViability"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Overall Business Viability</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Comprehensive rating of business feasibility
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="growthPotential"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Growth Potential</FormLabel>
                            <FormControl>
                              <ScoreSelect 
                                value={field.value} 
                                onChange={field.onChange}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Potential for scaling and future growth
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="reviewComments"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Review Comments</FormLabel>
                            <FormControl>
                              <Textarea
                                placeholder="Enter detailed review comments..."
                                className="resize-y min-h-[100px]"
                                {...field}
                                value={field.value || ""}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Additional observations and comments
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="recommendations"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Recommendations</FormLabel>
                            <FormControl>
                              <Textarea
                                placeholder="Enter recommendations for improvement..."
                                className="resize-y min-h-[100px]"
                                {...field}
                                value={field.value || ""}
                                disabled={!isFormEditable || isLoading}
                              />
                            </FormControl>
                            <FormDescription>
                              Recommended actions for business improvement
                            </FormDescription>
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <DialogFooter className="flex justify-between">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => onOpenChange(false)}
                  disabled={isLoading}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isLoading}
                  className="bg-gradient-to-r from-[#FF5F00] via-[#EB001B] to-[#F79E1B] border-none"
                >
                  {isLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Save className="mr-2 h-4 w-4" />
                  )}
                  Save Assessment
                </Button>
              </DialogFooter>
            </form>
          </Form>
        )}
      </DialogContent>
    </Dialog>
  );
}